{"version":3,"file":"23.test.js","sourceRoot":"","sources":["../../../spec/issues/23.test.ts"],"names":[],"mappings":";;AAAA,2BAAuB;AAEvB,yCAAkD;AASlD,aAAI,CAAC,kDAAkD,EAAE,UAAA,CAAC;IACxD,IAAM,gBAAgB,GAAG,kBAAU,CAAC,GAAG,EAAuB,CAAC;IAE/D,IAAI,KAAK,GAAG,CAAC,CAAA;IAEb,gBAAgB,CAAC,GAAG,CAAC,WAAG,CAAC,GAAG,EAAE,CAAC,CAAC,OAAO,CAAC,UAAC,CAAC,EAAE,CAAC;QAC3C,CAAC,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,qBAAqB,CAAC,CAAA;QAC9C,OAAO,CAAC,GAAG,CAAC,CAAC;IACf,CAAC,CAAC,CAAC;IAEH,gBAAgB,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK;IAEjC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA,CAAC,4BAA4B;AACrE,CAAC,CAAC,CAAC","sourcesContent":["import test from \"ava\";\n\nimport { Substitute, Arg } from \"../../src/index\";\n\ninterface CalculatorInterface {\n  add(a: number, b: number): number;\n  subtract(a: number, b: number): number;\n  divide(a: number, b: number): number;\n  isEnabled: boolean;\n}\n\ntest(\"issue 23: mimick received should not call method\", t => {\n  const mockedCalculator = Substitute.for<CalculatorInterface>();\n\n  let calls = 0\n\n  mockedCalculator.add(Arg.all()).mimicks((a, b) => {\n    t.deepEqual(++calls, 1, 'mimick called twice')\n    return a + b;\n  });\n\n  mockedCalculator.add(1, 1); // ok\n\n  mockedCalculator.received(1).add(1, 1) // not ok, calls mimick func\n});\n"]}