{"version":3,"file":"SetPropertyState.js","sourceRoot":"","sources":["../../../src/states/SetPropertyState.ts"],"names":[],"mappings":";;AAEA,0CAAqE;AAErE,IAAM,OAAO,GAAG,MAAM,EAAE,CAAC;AAEzB;IAgBI,0BAAoB,SAAsB;QAAE,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,6BAAc;;QAAtC,cAAS,GAAT,SAAS,CAAa;QACtC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QAEvB,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;IACxB,CAAC;IAhBD,sBAAW,uCAAS;aAApB;YACI,OAAO,IAAI,CAAC,UAAU,CAAC;QAC3B,CAAC;;;OAAA;IAED,sBAAW,sCAAQ;aAAnB;YACI,OAAO,IAAI,CAAC,SAAS,CAAC;QAC1B,CAAC;;;OAAA;IAED,sBAAW,uCAAS;aAApB;YACI,OAAO,IAAI,CAAC,UAAU,CAAC;QAC3B,CAAC;;;OAAA;IAQD,gCAAK,GAAL,UAAM,OAAgB;QAClB,OAAO,KAAK,CAAC,CAAC;IAClB,CAAC;IAED,8BAAG,GAAH,UAAI,OAAgB,EAAE,QAAqB,EAAE,KAAU;QACnD,IAAI,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC;QAChC,IAAM,eAAe,GAAG,OAAO,CAAC,YAAY,CAAC,eAAe,CAAC;QAC7D,IAAG,eAAe,EAAE;YAChB,SAAS,GAAG,OAAO,CAAC,YAAY;iBAC3B,iBAAiB;iBACjB,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,6BAAiB,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,EAAxC,CAAwC,CAAC;iBACrD,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,UAAU,EAAZ,CAAY,CAAC;iBACtB,MAAM,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,GAAG,CAAC,EAAL,CAAK,EAAE,CAAC,CAAC,CAAC;SACnC;QAED,OAAO,CAAC,YAAY,CAAC,kCAAkC,CACnD,CAAC,EAAE,CAAC,EAAE,wCAAwC;QAC9C,SAAS,EACT,UAAU,EACV,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,SAAS,CAAC,CAAC;QAEpB,IAAG,CAAC,eAAe,EAAE;YACjB,IAAI,CAAC,UAAU,EAAE,CAAC;SACrB;IACL,CAAC;IAED,8BAAG,GAAH,UAAI,OAAgB,EAAE,QAAqB;QACvC,OAAO,KAAK,CAAC,CAAC;IAClB,CAAC;IACL,uBAAC;AAAD,CAAC,AApDD,IAoDC;AApDY,4CAAgB","sourcesContent":["import { ContextState, PropertyKey } from \"./ContextState\";\nimport { Context } from \"src/Context\";\nimport { stringifyArguments, areArgumentsEqual } from \"../Utilities\";\n\nconst Nothing = Symbol();\n\nexport class SetPropertyState implements ContextState {\n    private _callCount: number;\n    private _arguments: any[];\n\n    public get arguments() {\n        return this._arguments;\n    }\n\n    public get property() {\n        return this._property;\n    }\n\n    public get callCount() {\n        return this._callCount;\n    }\n\n    constructor(private _property: PropertyKey, ...args: any[]) {\n        this._arguments = args;\n\n        this._callCount = 0;\n    }\n\n    apply(context: Context): undefined {\n        return void 0;\n    }\n\n    set(context: Context, property: PropertyKey, value: any) {\n        let callCount = this._callCount;\n        const hasExpectations = context.initialState.hasExpectations;\n        if(hasExpectations) {\n            callCount = context.initialState\n                .setPropertyStates\n                .filter(x => areArgumentsEqual(x.arguments[0], value))\n                .map(x => x._callCount)\n                .reduce((a, b) => a + b, 0);\n        }\n\n        context.initialState.assertCallCountMatchesExpectations(\n            [[]], // not sure what this was supposed to do\n            callCount,\n            'property',\n            this.property,\n            this.arguments);\n\n        if(!hasExpectations) {\n            this._callCount++;\n        }\n    }\n\n    get(context: Context, property: PropertyKey): undefined {\n        return void 0;\n    }\n}"]}