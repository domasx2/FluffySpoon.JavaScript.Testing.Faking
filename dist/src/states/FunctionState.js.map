{"version":3,"file":"FunctionState.js","sourceRoot":"","sources":["../../../src/states/FunctionState.ts"],"names":[],"mappings":"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","sourcesContent":["import { ContextState, PropertyKey } from \"./ContextState\";\r\nimport { Context } from \"src/Context\";\r\nimport { stringifyArguments, stringifyCalls, areArgumentsEqual, areArgumentArraysEqual, Call } from \"../Utilities\";\r\nimport { GetPropertyState } from \"./GetPropertyState\";\r\nimport { Argument, Arg } from \"../Arguments\";\r\n\r\nconst Nothing = Symbol()\r\n\r\ninterface ReturnMock {\r\n    args: Call\r\n    returnValues: any[] | Symbol // why symbol, what\r\n    returnIndex: 0\r\n}\r\n\r\nexport class FunctionState implements ContextState {\r\n    private returns: ReturnMock[];\r\n    private mimicks: Function|null;\r\n\r\n    private _calls: Call[]; // list of lists of arguments this was called with\r\n    private _lastArgs?: Call // bit of a hack\r\n\r\n    public get calls(): Call[] {\r\n        return this._calls\r\n    }\r\n\r\n    public get callCount() {\r\n        return this._calls.length;\r\n    }\r\n\r\n    public get property() {\r\n        return this._getPropertyState.property;\r\n    }\r\n\r\n    constructor(private _getPropertyState: GetPropertyState) {\r\n        this.returns = [];\r\n        this.mimicks = null;\r\n        this._calls = [];\r\n    }\r\n\r\n    private getCallCount(args: Call): number {\r\n        return this._calls.reduce((count, cargs) => areArgumentArraysEqual(cargs, args) ? count + 1 : count, 0)\r\n    }\r\n\r\n    apply(context: Context, args: any[]) {\r\n        const hasExpectations = context.initialState.hasExpectations;\r\n        console.log('hasExpectactions', hasExpectations)\r\n        this._lastArgs = args\r\n\r\n        context.initialState.assertCallCountMatchesExpectations(\r\n            this._calls,\r\n            this.getCallCount(args),\r\n            'method',\r\n            this.property,\r\n            args);\r\n\r\n        if(!hasExpectations) {\r\n            this._calls.push(args)\r\n        }\r\n\r\n        if (!hasExpectations) {\r\n            if(this.mimicks)\r\n                return this.mimicks.apply(this.mimicks, args);\r\n\r\n            if(!this.returns.length)\r\n                return context.proxy;\r\n            \r\n            const returns = this.returns.find(r => areArgumentArraysEqual(r.args, args))\r\n\r\n            if (returns) {\r\n                const returnValues = returns.returnValues as any[]\r\n                if (returnValues.length === 1) {\r\n                    return returnValues[0]\r\n                }\r\n                if (returnValues.length > returns.returnIndex) {\r\n                    return returnValues[returns.returnIndex++]\r\n                }\r\n                return void 0 // probably a test setup error, imho throwin is more helpful -- domasx2\r\n                //throw Error(`${String(this._getPropertyState.property)} with ${stringifyArguments(returns.args)} called ${returns.returnIndex + 1} times, but only ${returnValues.length} return values were set up`)\r\n            }\r\n        }\r\n        return void 0\r\n    }\r\n\r\n    set(context: Context, property: PropertyKey, value: any) {\r\n    }\r\n\r\n    get(context: Context, property: PropertyKey) {\r\n        if (property === 'then')\r\n            return void 0;\r\n\r\n        if(property === 'mimicks') {\r\n            return (input: Function) => {\r\n                this.mimicks = input;\r\n                this._calls.pop()\r\n\r\n                context.state = context.initialState;\r\n            }\r\n        }\r\n\r\n        if(property === 'returns') {\r\n            if (this.returns.length) // I don't think this can happen -- domasx2\r\n                throw new Error('BUT HOW?')\r\n                //throw new Error('The return value for the function ' + this._getPropertyState.toString() + ' with ' + stringifyArguments(this._arguments) + ' has already been set to ' + this.returns);\r\n\r\n            return (...returns: any[]) => {\r\n                if (!this._lastArgs) {\r\n                    throw new Error('Eh, there\\'s a bug, no args recorded for this return :/')\r\n                }\r\n                this.returns.push({\r\n                    returnValues: returns,\r\n                    returnIndex: 0,\r\n                    args: this._lastArgs\r\n                })\r\n                this._calls.pop()\r\n\r\n                if(this.callCount === 0) {\r\n                    // var indexOfSelf = this\r\n                    //     ._getPropertyState\r\n                    //     .recordedFunctionStates\r\n                    //     .indexOf(this);\r\n                    // this._getPropertyState\r\n                    //     .recordedFunctionStates\r\n                    //     .splice(indexOfSelf, 1);\r\n                }\r\n\r\n                context.state = context.initialState;\r\n            };\r\n        }\r\n\r\n        return context.proxy;\r\n    }\r\n}"]}